hacer 2,4,7,8,9,10,11,15,18,19,20,22,23,25,27,28,30

2   create user user1@localhost identified by 'pass';
4   grant select on tema8.empleados to user1@localhost;
    No funciona porque user1 no tiene los permisos para añadir permisos a otros usuarios, habría que poner grant grant option on tema8.* to user1@localhost;
7   set PASSWORD for user1@localhost = PASSWORD('password');
8   grant select(nombre,loc) on tema8.depart to user1@localhost;
9   No se puede listar todo ya que no deja consultar aquellos datos que user1 no tiene autorizados. Consultando solo los datos autorizados si que los muestra.
10  create user user2@localhost identified by 'pass2', user3@'192.130.0.%' identified by 'pass3';
11  grant all on tema8.* to user2@localhost;
    grant select,insert on tema8.depart to user3@'192.130.0.%';
15  Fallará porque user3 solo tiene permisos de inserción en la tabla depart, y no en empleados
18  rename user user2@localhost to usuario2@localhost;
    rename user user3@'192.130.0.%' to usuario3@'192.130.0.%';
    Para mostrar: select user, host from mysql.user;
19  //
20  drop user usuario3@'192.130.0.%';
    SELECT * FROM `user`
22  grant create,drop on tema8.* to usuario2@localhost;
23  grant update(jefe), insert(comision) on tema8.empleados to user2@localhost;
25  UPDATE tema8.empleados SET jefe = 2 WHERE jefe = 1;
27  alter user 'user1'@'localhost' WITH MAX_USER_CONNECTIONS 2;
28  alter user 'user1'@'localhost' WITH MAX_QUERIES_PER_HOUR 10;
30  flush privileges;

31  create or replace view ed as SELECT * from empleados join depart using (IDDEPART);
32  SELECT apellido, OFICIO, nombre FROM `ed`;
33  create or replace view ed (nombre,oficio,departamento) as SELECT apellido,oficio,nombre from empleados join depart using(IDDEPART)
35  drop view ed;
36  No se puede ya que no puede coger los valores de una vista eliminada
37  create or replace view ed as SELECT empleados.apellido as 'nombre', empleados.CODEMP, empleados.COMISION, empleados.FECHA_ALT, empleados.IDDEPART, empleados.jefe, empleados.OFICIO, empleados.SALARIO, depart.loc, depart.nombre as 'departamento' from empleados, depart where empleados.IDDEPART = depart.IDDEPART;
38  Ahora ya se pueden ver los datos
39  create view notas_asig_alu as select notas.alumno, notas.asignatura, notas.fecha, notas.NOTA, asignaturas.COD, asignaturas.NOMBRE as 'nombre_asig', alumnos.* from notas join asignaturas join alumnos on alumnos.codigo = notas.alumno and notas.asignatura = asignaturas.COD;
40  SELECT * FROM `notas_asig_alu`;
41  describe notas_asig_alu;
42  show create view notas_asig_alu;
43  create or REPLACE view notasAlu as SELECT notas_asig_alu.nombre as 'nombre', notas_asig_alu.nombre_asig as 'materia', notas_asig_alu.NOTA as 'calificacion' from notas_asig_alu where notas_asig_alu.NOTA >= 5;
44  SELECT * FROM `notasalu`;
45  alter view notasalu as SELECT nombre,asignatura,nota, apellidos from notas_asig_alu;
46  
47  create or replace view salarios as select empleados.APELLIDO, depart.LOC from empleados join depart USING(IDDEPART) where empleados.SALARIO > 1200 and ifnull(empleados.COMISION,0) < 100;
48
49  No se puede ya que hay una tabla llamada empleados
50
51
52
53  CREATE VIEW led AS SELECT depart.NOMBRE,depart.loc,empleados.IDDEPART,empleados.APELLIDO FROM depart LEFT JOIN empleados  ON depart.IDDEPART = empleados.IDDEPART;
54
55

Transacciones:
58,59,60,62,63,66,67,68,69,70,71

58  
START TRANSACTION;
INSERT INTO transaccion (num) values (20);
SELECT * from transaccion;

59  No aparece el 20

60  No aparece el 20

62
START TRANSACTION;
INSERT INTO transaccion (num) values (20);
SELECT * from transaccion;
Aun no se muestra el 20

63
START TRANSACTION;
INSERT INTO transaccion (num) values (20);
SELECT * from transaccion;
COMMIT;
Ahora ya aparece el 20 en la tabla

66
START TRANSACTION;
INSERT INTO transaccion (Num) VALUES (111);
SAVEPOINT uno;
UPDATE transaccion SET num = 101 where num = 100;
SAVEPOINT dos;
INSERT INTO transaccion (Num) VALUES (102);
SAVEPOINT tres;
INSERT INTO transaccion (Num) VALUES (103);
ROLLBACK TO tres;
ROLLBACK TO dos;
COMMIT;
ROLLBACK TO uno;
No se puede volver a un savepoint que esta fuera del commit

67
START TRANSACTION;
INSERT INTO transaccion (Num) VALUES(110);
SAVEPOINT uno;
INSERT INTO transaccion (Num) VALUES (111)
CREATE DATABASE tema9
ROLLBACK TO uno;
No se puede hacer ya que la creacion de una base de datos no es una de las operaciones permitidas por la Transacciones

68
START TRANSACTION;
INSERT INTO transaccion (Num) VALUES(120);
SAVEPOINT uno;
INSERT INTO transaccion (Num) VALUES(121);
SAVEPOINT uno;
ROLLBACK TO uno;
INSERT INTO transaccion (Num) VALUES(122);
COMMIT;
ROLLBACK TO uno;
La primera parte funciona ya que si detecta que dos puntos de recuperación se llaman igual elimina el más antiguo. 
La otra parte no funciona ya que una vez realizado el commit no puedes volver a un punto de recuperación ya que detecta que este no existe, al estar este rollback fuera de la transaccion y el punto de recuperacion dentro.